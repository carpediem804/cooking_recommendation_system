{"remainingRequest":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\buefy\\src\\components\\upload\\Upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\buefy\\src\\components\\upload\\Upload.vue","mtime":1542387019000},{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1544630775545},{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1544630784027},{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":1544630775208},{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1544630775545},{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":1544630784402}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport FormElementMixin from '../../utils/FormElementMixin';\nimport { File } from '../../utils/ssr';\nexport default {\n  name: 'BUpload',\n  mixins: [FormElementMixin],\n  inheritAttrs: false,\n  props: {\n    value: {\n      type: [Object, Function, File, Array]\n    },\n    multiple: Boolean,\n    disabled: Boolean,\n    accept: String,\n    dragDrop: Boolean,\n    type: {\n      type: String,\n      default: 'is-primary'\n    },\n    native: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      newValue: this.value,\n      dragDropFocus: false,\n      _elementRef: 'input'\n    };\n  },\n  watch: {\n    /**\n     * When v-model is changed:\n     *   1. Set internal value.\n     *   2. Reset input value if array is empty\n     *   3. If it's invalid, validate again.\n     */\n    value: function value(_value) {\n      this.newValue = _value;\n\n      if (!this.newValue || Array.isArray(this.newValue) && this.newValue.length === 0) {\n        this.$refs.input.value = null;\n      }\n\n      !this.isValid && !this.dragDrop && this.checkHtml5Validity();\n    }\n  },\n  methods: {\n    /**\n     * Listen change event on input type 'file',\n     * emit 'input' event and validate\n     */\n    onFileChange: function onFileChange(event) {\n      if (this.disabled || this.loading) return;\n\n      if (this.dragDrop) {\n        this.updateDragDropFocus(false);\n      }\n\n      var value = event.target.files || event.dataTransfer.files;\n\n      if (value && value.length) {\n        if (!this.multiple) {\n          // only one element in case drag drop mode and isn't multiple\n          if (this.dragDrop && value.length !== 1) return false;else {\n            var file = value[0];\n\n            if (this.checkType(file)) {\n              this.newValue = file;\n            }\n          }\n        } else {\n          // always new values if native or undefined local\n          if (this.native || !this.newValue) {\n            this.newValue = [];\n          }\n\n          for (var i = 0; i < value.length; i++) {\n            var _file = value[i];\n\n            if (this.checkType(_file)) {\n              this.newValue.push(_file);\n            }\n          }\n        }\n      }\n\n      this.$emit('input', this.newValue);\n      !this.dragDrop && this.checkHtml5Validity();\n    },\n\n    /**\n     * Listen drag-drop to update internal variable\n     */\n    updateDragDropFocus: function updateDragDropFocus(focus) {\n      if (!this.disabled && !this.loading) {\n        this.dragDropFocus = focus;\n      }\n    },\n\n    /**\n     * Check mime type of file\n     */\n    checkType: function checkType(file) {\n      if (!this.accept) return true;\n      var types = this.accept.split(',');\n      if (types.length === 0) return true;\n      var valid = false;\n\n      for (var i = 0; i < types.length && !valid; i++) {\n        var type = types[i].trim();\n\n        if (type) {\n          if (type.substring(0, 1) === '.') {\n            // check extension\n            var extIndex = file.name.lastIndexOf('.');\n\n            if (extIndex >= 0 && file.name.substring(extIndex) === type) {\n              valid = true;\n            }\n          } else {\n            // check mime type\n            if (file.type.match(type)) {\n              valid = true;\n            }\n          }\n        }\n      }\n\n      return valid;\n    }\n  }\n};",{"version":3,"sources":["Upload.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <label class=\"upload control\">\r\n        <template v-if=\"!dragDrop\">\r\n            <slot/>\r\n        </template>\r\n\r\n        <div\r\n            v-else\r\n            class=\"upload-draggable\"\r\n            :class=\"[type, {\r\n                'is-loading': loading,\r\n                'is-disabled': disabled,\r\n                'is-hovered': dragDropFocus\r\n            }]\"\r\n            @dragover.prevent=\"updateDragDropFocus(true)\"\r\n            @dragleave.prevent=\"updateDragDropFocus(false)\"\r\n            @dragenter.prevent=\"updateDragDropFocus(true)\"\r\n            @drop.prevent=\"onFileChange\">\r\n            <slot/>\r\n        </div>\r\n\r\n        <input\r\n            ref=\"input\"\r\n            type=\"file\"\r\n            v-bind=\"$attrs\"\r\n            :multiple=\"multiple\"\r\n            :accept=\"accept\"\r\n            :disabled=\"disabled\"\r\n            @change=\"onFileChange\">\r\n    </label>\r\n</template>\r\n\r\n<script>\r\n    import FormElementMixin from '../../utils/FormElementMixin'\r\n    import { File } from '../../utils/ssr'\r\n\r\n    export default {\r\n        name: 'BUpload',\r\n        mixins: [FormElementMixin],\r\n        inheritAttrs: false,\r\n        props: {\r\n            value: {\r\n                type: [Object, Function, File, Array]\r\n            },\r\n            multiple: Boolean,\r\n            disabled: Boolean,\r\n            accept: String,\r\n            dragDrop: Boolean,\r\n            type: {\r\n                type: String,\r\n                default: 'is-primary'\r\n            },\r\n            native: {\r\n                type: Boolean,\r\n                default: false\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                newValue: this.value,\r\n                dragDropFocus: false,\r\n                _elementRef: 'input'\r\n            }\r\n        },\r\n        watch: {\r\n            /**\r\n             * When v-model is changed:\r\n             *   1. Set internal value.\r\n             *   2. Reset input value if array is empty\r\n             *   3. If it's invalid, validate again.\r\n             */\r\n            value(value) {\r\n                this.newValue = value\r\n                if (!this.newValue ||\r\n                    (Array.isArray(this.newValue) && this.newValue.length === 0)) {\r\n                    this.$refs.input.value = null\r\n                }\r\n                !this.isValid && !this.dragDrop && this.checkHtml5Validity()\r\n            }\r\n        },\r\n        methods: {\r\n\r\n            /**\r\n             * Listen change event on input type 'file',\r\n             * emit 'input' event and validate\r\n             */\r\n            onFileChange(event) {\r\n                if (this.disabled || this.loading) return\r\n                if (this.dragDrop) {\r\n                    this.updateDragDropFocus(false)\r\n                }\r\n                const value = event.target.files || event.dataTransfer.files\r\n                if (value && value.length) {\r\n                    if (!this.multiple) {\r\n                        // only one element in case drag drop mode and isn't multiple\r\n                        if (this.dragDrop && value.length !== 1) return false\r\n                        else {\r\n                            const file = value[0]\r\n                            if (this.checkType(file)) {\r\n                                this.newValue = file\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // always new values if native or undefined local\r\n                        if (this.native || !this.newValue) {\r\n                            this.newValue = []\r\n                        }\r\n                        for (let i = 0; i < value.length; i++) {\r\n                            const file = value[i]\r\n                            if (this.checkType(file)) {\r\n                                this.newValue.push(file)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                this.$emit('input', this.newValue)\r\n                !this.dragDrop && this.checkHtml5Validity()\r\n            },\r\n\r\n            /**\r\n             * Listen drag-drop to update internal variable\r\n             */\r\n            updateDragDropFocus(focus) {\r\n                if (!this.disabled && !this.loading) {\r\n                    this.dragDropFocus = focus\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Check mime type of file\r\n             */\r\n            checkType(file) {\r\n                if (!this.accept) return true\r\n                const types = this.accept.split(',')\r\n                if (types.length === 0) return true\r\n                let valid = false\r\n                for (let i = 0; i < types.length && !valid; i++) {\r\n                    const type = types[i].trim()\r\n                    if (type) {\r\n                        if (type.substring(0, 1) === '.') {\r\n                            // check extension\r\n                            const extIndex = file.name.lastIndexOf('.')\r\n                            if (extIndex >= 0 && file.name.substring(extIndex) === type) {\r\n                                valid = true\r\n                            }\r\n                        } else {\r\n                            // check mime type\r\n                            if (file.type.match(type)) {\r\n                                valid = true\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return valid\r\n            }\r\n        }\r\n    }\r\n</script>\r\n"],"sourceRoot":"node_modules\\buefy\\src\\components\\upload"}]}