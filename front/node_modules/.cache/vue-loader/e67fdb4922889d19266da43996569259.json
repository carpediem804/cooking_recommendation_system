{"remainingRequest":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\buefy\\src\\components\\icon\\Icon.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\buefy\\src\\components\\icon\\Icon.vue","mtime":1539091704000},{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":1544630775208},{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1544630775545},{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":1544630784402}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport config from '../../utils/config'\n\nexport default {\n    name: 'BIcon',\n    props: {\n        type: [String, Object],\n        pack: String,\n        icon: String,\n        size: String,\n        customSize: String,\n        customClass: String,\n        both: Boolean // This is used internally to show both MDI and FA icon\n    },\n    computed: {\n        /**\n         * Internal icon name based on the pack.\n         * If pack is 'fa', gets the equivalent FA icon name of the MDI,\n         * internal icons are always MDI.\n         */\n        newIcon() {\n            if (!this.both) {\n                if (this.newPack === 'mdi') {\n                    return `${this.newPack}-${this.icon}`\n                } else {\n                    return `fa-${this.icon}`\n                }\n            }\n\n            return this.newPack === 'mdi'\n                ? `${this.newPack}-${this.icon}`\n                : `fa-${this.getEquivalentIconOf(this.icon)}`\n        },\n        newPack() {\n            return this.pack || config.defaultIconPack\n        },\n        newType() {\n            if (!this.type) return\n\n            let splitType = []\n            if (typeof this.type === 'string') {\n                splitType = this.type.split('-')\n            } else {\n                for (let key in this.type) {\n                    if (this.type[key]) {\n                        splitType = key.split('-')\n                        break\n                    }\n                }\n            }\n            if (splitType.length <= 1) return\n\n            return `has-text-${splitType[1]}`\n        },\n        newCustomSize() {\n            return this.customSize || this.customSizeByPack\n        },\n        customSizeByPack() {\n            const defaultSize = this.newPack === 'mdi'\n                ? 'mdi-24px'\n                : 'fa-lg'\n            const mediumSize = this.newPack === 'mdi'\n                ? 'mdi-36px'\n                : 'fa-2x'\n            const largeSize = this.newPack === 'mdi'\n                ? 'mdi-48px'\n                : 'fa-3x'\n            switch (this.size) {\n                case 'is-small': return\n                case 'is-medium': return mediumSize\n                case 'is-large': return largeSize\n                default: return defaultSize\n            }\n        }\n    },\n    methods: {\n        /**\n         * Equivalent FA icon name of the MDI.\n         */\n        getEquivalentIconOf(value) {\n            switch (value) {\n                case 'check': return 'check'\n                case 'information': return 'info-circle'\n                case 'check-circle': return 'check-circle'\n                case 'alert': return 'exclamation-triangle'\n                case 'alert-circle': return 'exclamation-circle'\n                case 'arrow-up': return 'arrow-up'\n                case 'chevron-right': return 'angle-right'\n                case 'chevron-left': return 'angle-left'\n                case 'chevron-down': return 'angle-down'\n                case 'eye': return 'eye'\n                case 'eye-off': return 'eye-slash'\n                case 'menu-down': return 'caret-down'\n                case 'menu-up': return 'caret-up'\n                default: return value\n            }\n        }\n    }\n}\n",{"version":3,"sources":["Icon.vue"],"names":[],"mappings":";;;;;;;AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Icon.vue","sourceRoot":"node_modules\\buefy\\src\\components\\icon","sourcesContent":["<template>\r\n    <span class=\"icon\" :class=\"[newType, size]\">\r\n        <i :class=\"[newPack, newIcon, newCustomSize, customClass]\"/>\r\n    </span>\r\n</template>\r\n\r\n<script>\r\n    import config from '../../utils/config'\r\n\r\n    export default {\r\n        name: 'BIcon',\r\n        props: {\r\n            type: [String, Object],\r\n            pack: String,\r\n            icon: String,\r\n            size: String,\r\n            customSize: String,\r\n            customClass: String,\r\n            both: Boolean // This is used internally to show both MDI and FA icon\r\n        },\r\n        computed: {\r\n            /**\r\n             * Internal icon name based on the pack.\r\n             * If pack is 'fa', gets the equivalent FA icon name of the MDI,\r\n             * internal icons are always MDI.\r\n             */\r\n            newIcon() {\r\n                if (!this.both) {\r\n                    if (this.newPack === 'mdi') {\r\n                        return `${this.newPack}-${this.icon}`\r\n                    } else {\r\n                        return `fa-${this.icon}`\r\n                    }\r\n                }\r\n\r\n                return this.newPack === 'mdi'\r\n                    ? `${this.newPack}-${this.icon}`\r\n                    : `fa-${this.getEquivalentIconOf(this.icon)}`\r\n            },\r\n            newPack() {\r\n                return this.pack || config.defaultIconPack\r\n            },\r\n            newType() {\r\n                if (!this.type) return\r\n\r\n                let splitType = []\r\n                if (typeof this.type === 'string') {\r\n                    splitType = this.type.split('-')\r\n                } else {\r\n                    for (let key in this.type) {\r\n                        if (this.type[key]) {\r\n                            splitType = key.split('-')\r\n                            break\r\n                        }\r\n                    }\r\n                }\r\n                if (splitType.length <= 1) return\r\n\r\n                return `has-text-${splitType[1]}`\r\n            },\r\n            newCustomSize() {\r\n                return this.customSize || this.customSizeByPack\r\n            },\r\n            customSizeByPack() {\r\n                const defaultSize = this.newPack === 'mdi'\r\n                    ? 'mdi-24px'\r\n                    : 'fa-lg'\r\n                const mediumSize = this.newPack === 'mdi'\r\n                    ? 'mdi-36px'\r\n                    : 'fa-2x'\r\n                const largeSize = this.newPack === 'mdi'\r\n                    ? 'mdi-48px'\r\n                    : 'fa-3x'\r\n                switch (this.size) {\r\n                    case 'is-small': return\r\n                    case 'is-medium': return mediumSize\r\n                    case 'is-large': return largeSize\r\n                    default: return defaultSize\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n            /**\r\n             * Equivalent FA icon name of the MDI.\r\n             */\r\n            getEquivalentIconOf(value) {\r\n                switch (value) {\r\n                    case 'check': return 'check'\r\n                    case 'information': return 'info-circle'\r\n                    case 'check-circle': return 'check-circle'\r\n                    case 'alert': return 'exclamation-triangle'\r\n                    case 'alert-circle': return 'exclamation-circle'\r\n                    case 'arrow-up': return 'arrow-up'\r\n                    case 'chevron-right': return 'angle-right'\r\n                    case 'chevron-left': return 'angle-left'\r\n                    case 'chevron-down': return 'angle-down'\r\n                    case 'eye': return 'eye'\r\n                    case 'eye-off': return 'eye-slash'\r\n                    case 'menu-down': return 'caret-down'\r\n                    case 'menu-up': return 'caret-up'\r\n                    default: return value\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n"]}]}