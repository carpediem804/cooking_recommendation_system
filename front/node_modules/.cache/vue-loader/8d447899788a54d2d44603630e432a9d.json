{"remainingRequest":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\buefy\\src\\components\\modal\\Modal.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\buefy\\src\\components\\modal\\Modal.vue","mtime":1536235400000},{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":1544630775208},{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1544630775545},{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":1544630784402}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { removeElement } from '../../utils/helpers'\nimport config from '../../utils/config'\n\nexport default {\n    name: 'BModal',\n    props: {\n        active: Boolean,\n        component: [Object, Function],\n        content: String,\n        programmatic: Boolean,\n        props: Object,\n        events: Object,\n        width: {\n            type: [String, Number],\n            default: 960\n        },\n        hasModalCard: Boolean,\n        animation: {\n            type: String,\n            default: 'zoom-out'\n        },\n        canCancel: {\n            type: [Array, Boolean],\n            default: () => ['escape', 'x', 'outside', 'button']\n        },\n        onCancel: {\n            type: Function,\n            default: () => {}\n        },\n        scroll: {\n            type: String,\n            default: () => {\n                return config.defaultModalScroll\n                    ? config.defaultModalScroll\n                    : 'clip'\n            },\n            validator: (value) => {\n                return [\n                    'clip',\n                    'keep'\n                ].indexOf(value) >= 0\n            }\n        }\n    },\n    data() {\n        return {\n            isActive: this.active || false,\n            savedScrollTop: null,\n            newWidth: typeof this.width === 'number'\n                ? this.width + 'px'\n                : this.width\n        }\n    },\n    computed: {\n        cancelOptions() {\n            return typeof this.canCancel === 'boolean'\n                ? this.canCancel\n                    ? ['escape', 'x', 'outside', 'button']\n                    : []\n                : this.canCancel\n        },\n        showX() {\n            return this.cancelOptions.indexOf('x') >= 0\n        }\n    },\n    watch: {\n        active(value) {\n            this.isActive = value\n        },\n        isActive() {\n            this.handleScroll()\n        }\n    },\n    methods: {\n        handleScroll() {\n            if (typeof window === 'undefined') return\n\n            if (this.scroll === 'clip') {\n                if (this.isActive) {\n                    document.documentElement.classList.add('is-clipped')\n                } else {\n                    document.documentElement.classList.remove('is-clipped')\n                }\n                return\n            }\n\n            this.savedScrollTop = !this.savedScrollTop\n                ? document.documentElement.scrollTop\n                : this.savedScrollTop\n\n            if (this.isActive) {\n                document.body.classList.add('is-noscroll')\n            } else {\n                document.body.classList.remove('is-noscroll')\n            }\n\n            if (this.isActive) {\n                document.body.style.top = `-${this.savedScrollTop}px`\n                return\n            }\n\n            document.documentElement.scrollTop = this.savedScrollTop\n            document.body.style.top = null\n            this.savedScrollTop = null\n        },\n\n        /**\n         * Close the Modal if canCancel and call the onCancel prop (function).\n         */\n        cancel(method) {\n            if (this.cancelOptions.indexOf(method) < 0) return\n\n            this.onCancel.apply(null, arguments)\n            this.close()\n        },\n\n        /**\n         * Call the onCancel prop (function).\n         * Emit events, and destroy modal if it's programmatic.\n         */\n        close() {\n            this.$emit('close')\n            this.$emit('update:active', false)\n\n            // Timeout for the animation complete before destroying\n            if (this.programmatic) {\n                this.isActive = false\n                setTimeout(() => {\n                    this.$destroy()\n                    removeElement(this.$el)\n                }, 150)\n            }\n        },\n\n        /**\n         * Keypress event that is bound to the document.\n         */\n        keyPress(event) {\n            // Esc key\n            if (this.isActive && event.keyCode === 27) this.cancel('escape')\n        }\n    },\n    created() {\n        if (typeof window !== 'undefined') {\n            document.addEventListener('keyup', this.keyPress)\n        }\n    },\n    beforeMount() {\n        // Insert the Modal component in body tag\n        // only if it's programmatic\n        this.programmatic && document.body.appendChild(this.$el)\n    },\n    mounted() {\n        if (this.programmatic) this.isActive = true\n        else if (this.isActive) this.handleScroll()\n    },\n    beforeDestroy() {\n        if (typeof window !== 'undefined') {\n            document.removeEventListener('keyup', this.keyPress)\n            // reset scroll\n            document.documentElement.classList.remove('is-clipped')\n            const savedScrollTop = !this.savedScrollTop\n                ? document.documentElement.scrollTop\n                : this.savedScrollTop\n            document.body.classList.remove('is-noscroll')\n            document.documentElement.scrollTop = savedScrollTop\n            document.body.style.top = null\n        }\n    }\n}\n",{"version":3,"sources":["Modal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Modal.vue","sourceRoot":"node_modules\\buefy\\src\\components\\modal","sourcesContent":["<template>\r\n    <transition :name=\"animation\">\r\n        <div v-if=\"isActive\" class=\"modal is-active\">\r\n            <div class=\"modal-background\" @click=\"cancel('outside')\"/>\r\n            <div\r\n                class=\"animation-content\"\r\n                :class=\"{ 'modal-content': !hasModalCard }\"\r\n                :style=\"{ maxWidth: newWidth }\">\r\n                <component\r\n                    v-if=\"component\"\r\n                    v-bind=\"props\"\r\n                    v-on=\"events\"\r\n                    :is=\"component\"\r\n                    @close=\"close\"/>\r\n                <div\r\n                    v-else-if=\"content\"\r\n                    v-html=\"content\"/>\r\n                <slot v-else/>\r\n            </div>\r\n            <button\r\n                type=\"button\"\r\n                v-if=\"showX\"\r\n                class=\"modal-close is-large\"\r\n                @click=\"cancel('x')\"/>\r\n        </div>\r\n    </transition>\r\n</template>\r\n\r\n<script>\r\n    import { removeElement } from '../../utils/helpers'\r\n    import config from '../../utils/config'\r\n\r\n    export default {\r\n        name: 'BModal',\r\n        props: {\r\n            active: Boolean,\r\n            component: [Object, Function],\r\n            content: String,\r\n            programmatic: Boolean,\r\n            props: Object,\r\n            events: Object,\r\n            width: {\r\n                type: [String, Number],\r\n                default: 960\r\n            },\r\n            hasModalCard: Boolean,\r\n            animation: {\r\n                type: String,\r\n                default: 'zoom-out'\r\n            },\r\n            canCancel: {\r\n                type: [Array, Boolean],\r\n                default: () => ['escape', 'x', 'outside', 'button']\r\n            },\r\n            onCancel: {\r\n                type: Function,\r\n                default: () => {}\r\n            },\r\n            scroll: {\r\n                type: String,\r\n                default: () => {\r\n                    return config.defaultModalScroll\r\n                        ? config.defaultModalScroll\r\n                        : 'clip'\r\n                },\r\n                validator: (value) => {\r\n                    return [\r\n                        'clip',\r\n                        'keep'\r\n                    ].indexOf(value) >= 0\r\n                }\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                isActive: this.active || false,\r\n                savedScrollTop: null,\r\n                newWidth: typeof this.width === 'number'\r\n                    ? this.width + 'px'\r\n                    : this.width\r\n            }\r\n        },\r\n        computed: {\r\n            cancelOptions() {\r\n                return typeof this.canCancel === 'boolean'\r\n                    ? this.canCancel\r\n                        ? ['escape', 'x', 'outside', 'button']\r\n                        : []\r\n                    : this.canCancel\r\n            },\r\n            showX() {\r\n                return this.cancelOptions.indexOf('x') >= 0\r\n            }\r\n        },\r\n        watch: {\r\n            active(value) {\r\n                this.isActive = value\r\n            },\r\n            isActive() {\r\n                this.handleScroll()\r\n            }\r\n        },\r\n        methods: {\r\n            handleScroll() {\r\n                if (typeof window === 'undefined') return\r\n\r\n                if (this.scroll === 'clip') {\r\n                    if (this.isActive) {\r\n                        document.documentElement.classList.add('is-clipped')\r\n                    } else {\r\n                        document.documentElement.classList.remove('is-clipped')\r\n                    }\r\n                    return\r\n                }\r\n\r\n                this.savedScrollTop = !this.savedScrollTop\r\n                    ? document.documentElement.scrollTop\r\n                    : this.savedScrollTop\r\n\r\n                if (this.isActive) {\r\n                    document.body.classList.add('is-noscroll')\r\n                } else {\r\n                    document.body.classList.remove('is-noscroll')\r\n                }\r\n\r\n                if (this.isActive) {\r\n                    document.body.style.top = `-${this.savedScrollTop}px`\r\n                    return\r\n                }\r\n\r\n                document.documentElement.scrollTop = this.savedScrollTop\r\n                document.body.style.top = null\r\n                this.savedScrollTop = null\r\n            },\r\n\r\n            /**\r\n             * Close the Modal if canCancel and call the onCancel prop (function).\r\n             */\r\n            cancel(method) {\r\n                if (this.cancelOptions.indexOf(method) < 0) return\r\n\r\n                this.onCancel.apply(null, arguments)\r\n                this.close()\r\n            },\r\n\r\n            /**\r\n             * Call the onCancel prop (function).\r\n             * Emit events, and destroy modal if it's programmatic.\r\n             */\r\n            close() {\r\n                this.$emit('close')\r\n                this.$emit('update:active', false)\r\n\r\n                // Timeout for the animation complete before destroying\r\n                if (this.programmatic) {\r\n                    this.isActive = false\r\n                    setTimeout(() => {\r\n                        this.$destroy()\r\n                        removeElement(this.$el)\r\n                    }, 150)\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Keypress event that is bound to the document.\r\n             */\r\n            keyPress(event) {\r\n                // Esc key\r\n                if (this.isActive && event.keyCode === 27) this.cancel('escape')\r\n            }\r\n        },\r\n        created() {\r\n            if (typeof window !== 'undefined') {\r\n                document.addEventListener('keyup', this.keyPress)\r\n            }\r\n        },\r\n        beforeMount() {\r\n            // Insert the Modal component in body tag\r\n            // only if it's programmatic\r\n            this.programmatic && document.body.appendChild(this.$el)\r\n        },\r\n        mounted() {\r\n            if (this.programmatic) this.isActive = true\r\n            else if (this.isActive) this.handleScroll()\r\n        },\r\n        beforeDestroy() {\r\n            if (typeof window !== 'undefined') {\r\n                document.removeEventListener('keyup', this.keyPress)\r\n                // reset scroll\r\n                document.documentElement.classList.remove('is-clipped')\r\n                const savedScrollTop = !this.savedScrollTop\r\n                    ? document.documentElement.scrollTop\r\n                    : this.savedScrollTop\r\n                document.body.classList.remove('is-noscroll')\r\n                document.documentElement.scrollTop = savedScrollTop\r\n                document.body.style.top = null\r\n            }\r\n        }\r\n    }\r\n</script>\r\n"]}]}