{"remainingRequest":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\buefy\\src\\components\\field\\Field.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\buefy\\src\\components\\field\\Field.vue","mtime":1539091704000},{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":1544630775208},{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1544630775545},{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":1544630784402}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport FieldBody from './FieldBody'\n\nexport default {\n    name: 'BField',\n    components: {\n        [FieldBody.name]: FieldBody\n    },\n    props: {\n        type: [String, Object],\n        label: String,\n        labelFor: String,\n        message: [String, Array, Object],\n        grouped: Boolean,\n        groupMultiline: Boolean,\n        position: String,\n        expanded: Boolean,\n        horizontal: Boolean,\n        addons: {\n            type: Boolean,\n            default: true\n        },\n        customClass: String\n    },\n    data() {\n        return {\n            newType: this.type,\n            newMessage: this.message,\n            fieldLabelSize: null,\n            _isField: true // Used internally by Input and Select\n        }\n    },\n    computed: {\n        rootClasses() {\n            return [this.newPosition, {\n                'is-expanded': this.expanded,\n                'is-grouped-multiline': this.groupMultiline,\n                'is-horizontal': this.horizontal\n            }]\n        },\n        /**\n         * Correct Bulma class for the side of the addon or group.\n         *\n         * This is not kept like the others (is-small, etc.),\n         * because since 'has-addons' is set automatically it\n         * doesn't make sense to teach users what addons are exactly.\n         */\n        newPosition() {\n            if (this.position === undefined) return\n\n            const position = this.position.split('-')\n            if (position.length < 1) return\n\n            const prefix = this.grouped\n                ? 'is-grouped-'\n                : 'has-addons-'\n\n            if (this.position) return prefix + position[1]\n        },\n        /**\n         * Formatted message in case it's an array\n         * (each element is separated by <br> tag)\n         */\n        formattedMessage() {\n            if (typeof this.newMessage === 'string') {\n                return this.newMessage\n            } else {\n                let messages = []\n                if (Array.isArray(this.newMessage)) {\n                    this.newMessage.forEach((message) => {\n                        if (typeof message === 'string') {\n                            messages.push(message)\n                        } else {\n                            for (let key in message) {\n                                if (message[key]) {\n                                    messages.push(key)\n                                }\n                            }\n                        }\n                    })\n                } else {\n                    for (let key in this.newMessage) {\n                        if (this.newMessage[key]) {\n                            messages.push(key)\n                        }\n                    }\n                }\n                return messages.filter((m) => { if (m) return m }).join(' <br> ')\n            }\n        }\n    },\n    watch: {\n        /**\n         * Set internal type when prop change.\n         */\n        type(value) {\n            this.newType = value\n        },\n\n        /**\n         * Set internal message when prop change.\n         */\n        message(value) {\n            this.newMessage = value\n        }\n    },\n    methods: {\n        /**\n         * Field has addons if there are more than one slot\n         * (element / component) in the Field.\n         * Or is grouped when prop is set.\n         * Is a method to be called when component re-render.\n         */\n        fieldType() {\n            if (this.grouped) return 'is-grouped'\n\n            let renderedNode = 0\n            if (this.$slots.default) {\n                renderedNode = this.$slots.default\n                                    .reduce((i, node) => node.tag ? i + 1 : i, 0)\n            }\n            if (\n                renderedNode > 1 &&\n                this.addons &&\n                !this.horizontal\n            ) {\n                return 'has-addons'\n            }\n        }\n    },\n    mounted() {\n        if (this.horizontal) {\n            // Bulma docs: .is-normal for any .input or .button\n            const elements = this.$el.querySelectorAll('.input, .select, .button, .textarea')\n            if (elements.length > 0) {\n                this.fieldLabelSize = 'is-normal'\n            }\n        }\n    }\n}\n\n",{"version":3,"sources":["Field.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"Field.vue","sourceRoot":"node_modules\\buefy\\src\\components\\field","sourcesContent":["<template>\r\n    <div class=\"field\" :class=\"[rootClasses, fieldType()]\">\r\n        <div\r\n            v-if=\"horizontal\"\r\n            class=\"field-label\"\r\n            :class=\"[customClass, fieldLabelSize]\">\r\n            <label\r\n                v-if=\"label\"\r\n                :for=\"labelFor\"\r\n                class=\"label\" >\r\n                {{ label }}\r\n            </label>\r\n        </div>\r\n        <template v-else>\r\n            <label\r\n                v-if=\"label\"\r\n                :for=\"labelFor\"\r\n                :class=\"customClass\"\r\n                class=\"label\">\r\n                {{ label }}\r\n            </label>\r\n        </template>\r\n        <b-field-body\r\n            v-if=\"horizontal\"\r\n            :message=\"newMessage ? formattedMessage : ''\"\r\n            :type=\"newType\">\r\n            <slot/>\r\n        </b-field-body>\r\n        <template v-else>\r\n            <slot/>\r\n        </template>\r\n        <p\r\n            v-if=\"newMessage && !horizontal\"\r\n            v-html=\"formattedMessage\"\r\n            class=\"help\"\r\n            :class=\"newType\"\r\n        />\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import FieldBody from './FieldBody'\r\n\r\n    export default {\r\n        name: 'BField',\r\n        components: {\r\n            [FieldBody.name]: FieldBody\r\n        },\r\n        props: {\r\n            type: [String, Object],\r\n            label: String,\r\n            labelFor: String,\r\n            message: [String, Array, Object],\r\n            grouped: Boolean,\r\n            groupMultiline: Boolean,\r\n            position: String,\r\n            expanded: Boolean,\r\n            horizontal: Boolean,\r\n            addons: {\r\n                type: Boolean,\r\n                default: true\r\n            },\r\n            customClass: String\r\n        },\r\n        data() {\r\n            return {\r\n                newType: this.type,\r\n                newMessage: this.message,\r\n                fieldLabelSize: null,\r\n                _isField: true // Used internally by Input and Select\r\n            }\r\n        },\r\n        computed: {\r\n            rootClasses() {\r\n                return [this.newPosition, {\r\n                    'is-expanded': this.expanded,\r\n                    'is-grouped-multiline': this.groupMultiline,\r\n                    'is-horizontal': this.horizontal\r\n                }]\r\n            },\r\n            /**\r\n             * Correct Bulma class for the side of the addon or group.\r\n             *\r\n             * This is not kept like the others (is-small, etc.),\r\n             * because since 'has-addons' is set automatically it\r\n             * doesn't make sense to teach users what addons are exactly.\r\n             */\r\n            newPosition() {\r\n                if (this.position === undefined) return\r\n\r\n                const position = this.position.split('-')\r\n                if (position.length < 1) return\r\n\r\n                const prefix = this.grouped\r\n                    ? 'is-grouped-'\r\n                    : 'has-addons-'\r\n\r\n                if (this.position) return prefix + position[1]\r\n            },\r\n            /**\r\n             * Formatted message in case it's an array\r\n             * (each element is separated by <br> tag)\r\n             */\r\n            formattedMessage() {\r\n                if (typeof this.newMessage === 'string') {\r\n                    return this.newMessage\r\n                } else {\r\n                    let messages = []\r\n                    if (Array.isArray(this.newMessage)) {\r\n                        this.newMessage.forEach((message) => {\r\n                            if (typeof message === 'string') {\r\n                                messages.push(message)\r\n                            } else {\r\n                                for (let key in message) {\r\n                                    if (message[key]) {\r\n                                        messages.push(key)\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    } else {\r\n                        for (let key in this.newMessage) {\r\n                            if (this.newMessage[key]) {\r\n                                messages.push(key)\r\n                            }\r\n                        }\r\n                    }\r\n                    return messages.filter((m) => { if (m) return m }).join(' <br> ')\r\n                }\r\n            }\r\n        },\r\n        watch: {\r\n            /**\r\n             * Set internal type when prop change.\r\n             */\r\n            type(value) {\r\n                this.newType = value\r\n            },\r\n\r\n            /**\r\n             * Set internal message when prop change.\r\n             */\r\n            message(value) {\r\n                this.newMessage = value\r\n            }\r\n        },\r\n        methods: {\r\n            /**\r\n             * Field has addons if there are more than one slot\r\n             * (element / component) in the Field.\r\n             * Or is grouped when prop is set.\r\n             * Is a method to be called when component re-render.\r\n             */\r\n            fieldType() {\r\n                if (this.grouped) return 'is-grouped'\r\n\r\n                let renderedNode = 0\r\n                if (this.$slots.default) {\r\n                    renderedNode = this.$slots.default\r\n                                        .reduce((i, node) => node.tag ? i + 1 : i, 0)\r\n                }\r\n                if (\r\n                    renderedNode > 1 &&\r\n                    this.addons &&\r\n                    !this.horizontal\r\n                ) {\r\n                    return 'has-addons'\r\n                }\r\n            }\r\n        },\r\n        mounted() {\r\n            if (this.horizontal) {\r\n                // Bulma docs: .is-normal for any .input or .button\r\n                const elements = this.$el.querySelectorAll('.input, .select, .button, .textarea')\r\n                if (elements.length > 0) {\r\n                    this.fieldLabelSize = 'is-normal'\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n</script>\r\n"]}]}