{"remainingRequest":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\buefy\\src\\components\\dropdown\\Dropdown.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\buefy\\src\\components\\dropdown\\Dropdown.vue","mtime":1536235400000},{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1544630775545},{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":1544630775208},{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1544630775545},{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":1544630784402}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    name: 'BDropdown',\n    props: {\n        value: {\n            type: [String, Number, Boolean, Object, Array, Symbol, Function],\n            default: null\n        },\n        disabled: Boolean,\n        hoverable: Boolean,\n        inline: Boolean,\n        position: {\n            type: String,\n            validator(value) {\n                return [\n                    'is-top-right',\n                    'is-top-left',\n                    'is-bottom-left'\n                ].indexOf(value) > -1\n            }\n        },\n        mobileModal: {\n            type: Boolean,\n            default: true\n        }\n    },\n    data() {\n        return {\n            selected: this.value,\n            isActive: false,\n            _isDropdown: true // Used internally by DropdownItem\n        }\n    },\n    computed: {\n        rootClasses() {\n            return [this.position, {\n                'is-disabled': this.disabled,\n                'is-hoverable': this.hoverable,\n                'is-inline': this.inline,\n                'is-active': this.isActive || this.inline,\n                'is-mobile-modal': this.isMobileModal\n            }]\n        },\n        isMobileModal() {\n            return this.mobileModal && !this.inline && !this.hoverable\n        }\n    },\n    watch: {\n        /**\n         * When v-model is changed set the new selected item.\n         */\n        value(value) {\n            this.selected = value\n        },\n\n        /**\n         * Emit event when isActive value is changed.\n         */\n        isActive(value) {\n            this.$emit('active-change', value)\n        }\n    },\n    methods: {\n        /**\n         * Click listener from DropdownItem.\n         *   1. Set new selected item.\n         *   2. Emit input event to update the user v-model.\n         *   3. Close the dropdown.\n         */\n        selectItem(value) {\n            if (this.selected !== value) {\n                this.$emit('change', value)\n                this.selected = value\n            }\n            this.$emit('input', value)\n            this.isActive = false\n        },\n\n        /**\n         * White-listed items to not close when clicked.\n         */\n        isInWhiteList(el) {\n            if (el === this.$refs.dropdownMenu) return true\n            if (el === this.$refs.trigger) return true\n            // All chidren from dropdown\n            if (this.$refs.dropdownMenu !== undefined) {\n                const children = this.$refs.dropdownMenu.querySelectorAll('*')\n                for (const child of children) {\n                    if (el === child) {\n                        return true\n                    }\n                }\n            }\n            // All children from trigger\n            if (this.$refs.trigger !== undefined) {\n                const children = this.$refs.trigger.querySelectorAll('*')\n                for (const child of children) {\n                    if (el === child) {\n                        return true\n                    }\n                }\n            }\n\n            return false\n        },\n\n        /**\n         * Close dropdown if clicked outside.\n         */\n        clickedOutside(event) {\n            if (this.inline) return\n\n            if (!this.isInWhiteList(event.target)) this.isActive = false\n        },\n\n        /**\n         * Toggle dropdown if it's not disabled.\n         */\n        toggle() {\n            if (this.disabled || this.hoverable) return\n\n            if (!this.isActive) {\n                // if not active, toggle after clickOutside event\n                // this fixes toggling programmatic\n                this.$nextTick(() => { this.isActive = !this.isActive })\n            } else {\n                this.isActive = !this.isActive\n            }\n        }\n    },\n    created() {\n        if (typeof window !== 'undefined') {\n            document.addEventListener('click', this.clickedOutside)\n        }\n    },\n    beforeDestroy() {\n        if (typeof window !== 'undefined') {\n            document.removeEventListener('click', this.clickedOutside)\n        }\n    }\n}\n",{"version":3,"sources":["Dropdown.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"Dropdown.vue","sourceRoot":"node_modules\\buefy\\src\\components\\dropdown","sourcesContent":["<template>\r\n    <div class=\"dropdown\" :class=\"rootClasses\">\r\n        <div\r\n            v-if=\"!inline\"\r\n            role=\"button\"\r\n            ref=\"trigger\"\r\n            class=\"dropdown-trigger\"\r\n            @click=\"toggle\">\r\n            <slot name=\"trigger\"/>\r\n        </div>\r\n\r\n        <transition name=\"fade\">\r\n            <div\r\n                v-if=\"isMobileModal\"\r\n                v-show=\"isActive\"\r\n                class=\"background\"\r\n            />\r\n        </transition>\r\n        <transition name=\"fade\">\r\n            <div\r\n                v-show=\"(!disabled && (isActive || hoverable)) || inline\"\r\n                ref=\"dropdownMenu\"\r\n                class=\"dropdown-menu\">\r\n                <div class=\"dropdown-content\">\r\n                    <slot/>\r\n                </div>\r\n            </div>\r\n        </transition>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: 'BDropdown',\r\n        props: {\r\n            value: {\r\n                type: [String, Number, Boolean, Object, Array, Symbol, Function],\r\n                default: null\r\n            },\r\n            disabled: Boolean,\r\n            hoverable: Boolean,\r\n            inline: Boolean,\r\n            position: {\r\n                type: String,\r\n                validator(value) {\r\n                    return [\r\n                        'is-top-right',\r\n                        'is-top-left',\r\n                        'is-bottom-left'\r\n                    ].indexOf(value) > -1\r\n                }\r\n            },\r\n            mobileModal: {\r\n                type: Boolean,\r\n                default: true\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                selected: this.value,\r\n                isActive: false,\r\n                _isDropdown: true // Used internally by DropdownItem\r\n            }\r\n        },\r\n        computed: {\r\n            rootClasses() {\r\n                return [this.position, {\r\n                    'is-disabled': this.disabled,\r\n                    'is-hoverable': this.hoverable,\r\n                    'is-inline': this.inline,\r\n                    'is-active': this.isActive || this.inline,\r\n                    'is-mobile-modal': this.isMobileModal\r\n                }]\r\n            },\r\n            isMobileModal() {\r\n                return this.mobileModal && !this.inline && !this.hoverable\r\n            }\r\n        },\r\n        watch: {\r\n            /**\r\n             * When v-model is changed set the new selected item.\r\n             */\r\n            value(value) {\r\n                this.selected = value\r\n            },\r\n\r\n            /**\r\n             * Emit event when isActive value is changed.\r\n             */\r\n            isActive(value) {\r\n                this.$emit('active-change', value)\r\n            }\r\n        },\r\n        methods: {\r\n            /**\r\n             * Click listener from DropdownItem.\r\n             *   1. Set new selected item.\r\n             *   2. Emit input event to update the user v-model.\r\n             *   3. Close the dropdown.\r\n             */\r\n            selectItem(value) {\r\n                if (this.selected !== value) {\r\n                    this.$emit('change', value)\r\n                    this.selected = value\r\n                }\r\n                this.$emit('input', value)\r\n                this.isActive = false\r\n            },\r\n\r\n            /**\r\n             * White-listed items to not close when clicked.\r\n             */\r\n            isInWhiteList(el) {\r\n                if (el === this.$refs.dropdownMenu) return true\r\n                if (el === this.$refs.trigger) return true\r\n                // All chidren from dropdown\r\n                if (this.$refs.dropdownMenu !== undefined) {\r\n                    const children = this.$refs.dropdownMenu.querySelectorAll('*')\r\n                    for (const child of children) {\r\n                        if (el === child) {\r\n                            return true\r\n                        }\r\n                    }\r\n                }\r\n                // All children from trigger\r\n                if (this.$refs.trigger !== undefined) {\r\n                    const children = this.$refs.trigger.querySelectorAll('*')\r\n                    for (const child of children) {\r\n                        if (el === child) {\r\n                            return true\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return false\r\n            },\r\n\r\n            /**\r\n             * Close dropdown if clicked outside.\r\n             */\r\n            clickedOutside(event) {\r\n                if (this.inline) return\r\n\r\n                if (!this.isInWhiteList(event.target)) this.isActive = false\r\n            },\r\n\r\n            /**\r\n             * Toggle dropdown if it's not disabled.\r\n             */\r\n            toggle() {\r\n                if (this.disabled || this.hoverable) return\r\n\r\n                if (!this.isActive) {\r\n                    // if not active, toggle after clickOutside event\r\n                    // this fixes toggling programmatic\r\n                    this.$nextTick(() => { this.isActive = !this.isActive })\r\n                } else {\r\n                    this.isActive = !this.isActive\r\n                }\r\n            }\r\n        },\r\n        created() {\r\n            if (typeof window !== 'undefined') {\r\n                document.addEventListener('click', this.clickedOutside)\r\n            }\r\n        },\r\n        beforeDestroy() {\r\n            if (typeof window !== 'undefined') {\r\n                document.removeEventListener('click', this.clickedOutside)\r\n            }\r\n        }\r\n    }\r\n</script>\r\n"]}]}