{"remainingRequest":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\buefy\\src\\components\\input\\Input.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\buefy\\src\\components\\input\\Input.vue","mtime":1536235400000},{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":1544630775208},{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1544630775545},{"path":"C:\\Users\\Daehyun\\Desktop\\sex\\team_project\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":1544630784402}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Icon from '../icon/Icon'\nimport config from '../../utils/config'\nimport FormElementMixin from '../../utils/FormElementMixin'\n\nexport default {\n    name: 'BInput',\n    components: {\n        [Icon.name]: Icon\n    },\n    mixins: [FormElementMixin],\n    inheritAttrs: false,\n    props: {\n        value: [Number, String],\n        type: {\n            type: String,\n            default: 'text'\n        },\n        passwordReveal: Boolean,\n        hasCounter: {\n            type: Boolean,\n            default: () => config.defaultInputHasCounter\n        }\n    },\n    data() {\n        return {\n            newValue: this.value,\n            newType: this.type,\n            newAutocomplete: this.autocomplete || config.defaultInputAutocomplete,\n            isPasswordVisible: false,\n            _elementRef: this.type === 'textarea'\n                ? 'textarea'\n                : 'input'\n        }\n    },\n    computed: {\n        rootClasses() {\n            return [\n                this.iconPosition,\n                this.size,\n                {\n                    'is-expanded': this.expanded,\n                    'is-loading': this.loading,\n                    'is-clearfix': !this.hasMessage\n                }\n            ]\n        },\n        inputClasses() {\n            return [\n                this.statusType,\n                this.size,\n                { 'is-rounded': this.rounded }\n            ]\n        },\n        hasIconRight() {\n            return this.passwordReveal || this.loading || this.statusType\n        },\n\n        /**\n         * Position of the icon or if it's both sides.\n         */\n        iconPosition() {\n            if (this.icon && this.hasIconRight) {\n                return 'has-icons-left has-icons-right'\n            } else if (!this.icon && this.hasIconRight) {\n                return 'has-icons-right'\n            } else if (this.icon) {\n                return 'has-icons-left'\n            }\n        },\n\n        /**\n         * Icon name (MDI) based on the type.\n         */\n        statusTypeIcon() {\n            switch (this.statusType) {\n                case 'is-success': return 'check'\n                case 'is-danger': return 'alert-circle'\n                case 'is-info': return 'information'\n                case 'is-warning': return 'alert'\n            }\n        },\n\n        /**\n         * Check if have any message prop from parent if it's a Field.\n         */\n        hasMessage() {\n            return !!this.statusMessage\n        },\n\n        /**\n         * Current password-reveal icon name.\n         */\n        passwordVisibleIcon() {\n            return !this.isPasswordVisible ? 'eye' : 'eye-off'\n        },\n        /**\n         * Get value length\n         */\n        valueLength() {\n            if (typeof this.newValue === 'string') {\n                return this.newValue.length\n            } else if (typeof this.newValue === 'number') {\n                return this.newValue.toString().length\n            }\n            return 0\n        }\n    },\n    watch: {\n        /**\n         * When v-model is changed:\n         *   1. Set internal value.\n         *   2. If it's invalid, validate again.\n         */\n        value(value) {\n            this.newValue = value\n        },\n\n        /**\n         * Update user's v-model and validate again whenever\n         * internal value is changed.\n         */\n        newValue(value) {\n            this.$emit('input', value)\n            !this.isValid && this.checkHtml5Validity()\n        }\n    },\n    methods: {\n        /**\n         * Toggle the visibility of a password-reveal input\n         * by changing the type and focus the input right away.\n         */\n        togglePasswordVisibility() {\n            this.isPasswordVisible = !this.isPasswordVisible\n            this.newType = this.isPasswordVisible ? 'text' : 'password'\n\n            this.$nextTick(() => {\n                this.$refs.input.focus()\n            })\n        },\n\n        /**\n         * Input's 'input' event listener, 'nextTick' is used to prevent event firing\n         * before ui update, helps when using masks (Cleavejs and potentially others).\n         */\n        onInput(event) {\n            this.$nextTick(() => { this.newValue = event.target.value })\n        }\n    }\n}\n",{"version":3,"sources":["Input.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"Input.vue","sourceRoot":"node_modules\\buefy\\src\\components\\input","sourcesContent":["<template>\r\n    <div class=\"control\" :class=\"rootClasses\">\r\n        <input\r\n            v-if=\"type !== 'textarea'\"\r\n            ref=\"input\"\r\n            class=\"input\"\r\n            :class=\"inputClasses\"\r\n            :type=\"newType\"\r\n            :autocomplete=\"newAutocomplete\"\r\n            :maxlength=\"maxlength\"\r\n            :value=\"newValue\"\r\n            v-bind=\"$attrs\"\r\n            @input=\"onInput\"\r\n            @blur=\"onBlur\"\r\n            @focus=\"onFocus\">\r\n\r\n        <textarea\r\n            v-else\r\n            ref=\"textarea\"\r\n            class=\"textarea\"\r\n            :class=\"inputClasses\"\r\n            :maxlength=\"maxlength\"\r\n            :value=\"newValue\"\r\n            v-bind=\"$attrs\"\r\n            @input=\"onInput\"\r\n            @blur=\"onBlur\"\r\n            @focus=\"onFocus\"/>\r\n\r\n        <b-icon\r\n            v-if=\"icon\"\r\n            class=\"is-left\"\r\n            :icon=\"icon\"\r\n            :pack=\"iconPack\"\r\n            :size=\"iconSize\"/>\r\n\r\n        <b-icon\r\n            v-if=\"!loading && (passwordReveal || statusType)\"\r\n            class=\"is-right\"\r\n            :class=\"{ 'is-clickable': passwordReveal }\"\r\n            :icon=\"passwordReveal ? passwordVisibleIcon : statusTypeIcon\"\r\n            :pack=\"iconPack\"\r\n            :size=\"iconSize\"\r\n            :type=\"!passwordReveal ? statusType : 'is-primary'\"\r\n            both\r\n            @click.native=\"togglePasswordVisibility\"/>\r\n\r\n        <small\r\n            v-if=\"maxlength && hasCounter && type !== 'number'\"\r\n            class=\"help counter\"\r\n            :class=\"{ 'is-invisible': !isFocused }\">\r\n            {{ valueLength }} / {{ maxlength }}\r\n        </small>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import Icon from '../icon/Icon'\r\n    import config from '../../utils/config'\r\n    import FormElementMixin from '../../utils/FormElementMixin'\r\n\r\n    export default {\r\n        name: 'BInput',\r\n        components: {\r\n            [Icon.name]: Icon\r\n        },\r\n        mixins: [FormElementMixin],\r\n        inheritAttrs: false,\r\n        props: {\r\n            value: [Number, String],\r\n            type: {\r\n                type: String,\r\n                default: 'text'\r\n            },\r\n            passwordReveal: Boolean,\r\n            hasCounter: {\r\n                type: Boolean,\r\n                default: () => config.defaultInputHasCounter\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                newValue: this.value,\r\n                newType: this.type,\r\n                newAutocomplete: this.autocomplete || config.defaultInputAutocomplete,\r\n                isPasswordVisible: false,\r\n                _elementRef: this.type === 'textarea'\r\n                    ? 'textarea'\r\n                    : 'input'\r\n            }\r\n        },\r\n        computed: {\r\n            rootClasses() {\r\n                return [\r\n                    this.iconPosition,\r\n                    this.size,\r\n                    {\r\n                        'is-expanded': this.expanded,\r\n                        'is-loading': this.loading,\r\n                        'is-clearfix': !this.hasMessage\r\n                    }\r\n                ]\r\n            },\r\n            inputClasses() {\r\n                return [\r\n                    this.statusType,\r\n                    this.size,\r\n                    { 'is-rounded': this.rounded }\r\n                ]\r\n            },\r\n            hasIconRight() {\r\n                return this.passwordReveal || this.loading || this.statusType\r\n            },\r\n\r\n            /**\r\n             * Position of the icon or if it's both sides.\r\n             */\r\n            iconPosition() {\r\n                if (this.icon && this.hasIconRight) {\r\n                    return 'has-icons-left has-icons-right'\r\n                } else if (!this.icon && this.hasIconRight) {\r\n                    return 'has-icons-right'\r\n                } else if (this.icon) {\r\n                    return 'has-icons-left'\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Icon name (MDI) based on the type.\r\n             */\r\n            statusTypeIcon() {\r\n                switch (this.statusType) {\r\n                    case 'is-success': return 'check'\r\n                    case 'is-danger': return 'alert-circle'\r\n                    case 'is-info': return 'information'\r\n                    case 'is-warning': return 'alert'\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Check if have any message prop from parent if it's a Field.\r\n             */\r\n            hasMessage() {\r\n                return !!this.statusMessage\r\n            },\r\n\r\n            /**\r\n             * Current password-reveal icon name.\r\n             */\r\n            passwordVisibleIcon() {\r\n                return !this.isPasswordVisible ? 'eye' : 'eye-off'\r\n            },\r\n            /**\r\n             * Get value length\r\n             */\r\n            valueLength() {\r\n                if (typeof this.newValue === 'string') {\r\n                    return this.newValue.length\r\n                } else if (typeof this.newValue === 'number') {\r\n                    return this.newValue.toString().length\r\n                }\r\n                return 0\r\n            }\r\n        },\r\n        watch: {\r\n            /**\r\n             * When v-model is changed:\r\n             *   1. Set internal value.\r\n             *   2. If it's invalid, validate again.\r\n             */\r\n            value(value) {\r\n                this.newValue = value\r\n            },\r\n\r\n            /**\r\n             * Update user's v-model and validate again whenever\r\n             * internal value is changed.\r\n             */\r\n            newValue(value) {\r\n                this.$emit('input', value)\r\n                !this.isValid && this.checkHtml5Validity()\r\n            }\r\n        },\r\n        methods: {\r\n            /**\r\n             * Toggle the visibility of a password-reveal input\r\n             * by changing the type and focus the input right away.\r\n             */\r\n            togglePasswordVisibility() {\r\n                this.isPasswordVisible = !this.isPasswordVisible\r\n                this.newType = this.isPasswordVisible ? 'text' : 'password'\r\n\r\n                this.$nextTick(() => {\r\n                    this.$refs.input.focus()\r\n                })\r\n            },\r\n\r\n            /**\r\n             * Input's 'input' event listener, 'nextTick' is used to prevent event firing\r\n             * before ui update, helps when using masks (Cleavejs and potentially others).\r\n             */\r\n            onInput(event) {\r\n                this.$nextTick(() => { this.newValue = event.target.value })\r\n            }\r\n        }\r\n    }\r\n</script>\r\n"]}]}